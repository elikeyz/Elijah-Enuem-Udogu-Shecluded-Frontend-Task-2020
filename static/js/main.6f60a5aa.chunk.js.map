{"version":3,"sources":["components/Header/index.js","pages/Home/index.js","pages/Cats/index.js","pages/Lotr/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","expand","to","Brand","Toggle","aria-controls","Collapse","className","id","Nav","Home","Container","Date","getFullYear","Cats","Lotr","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wWAsBeA,MAjBf,WACI,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MACpC,kBAAC,IAAD,CAAMC,GAAG,KACL,kBAACJ,EAAA,EAAOK,MAAR,uBAEJ,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,0BAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,UAAU,sBAAsBC,GAAG,yBAChD,kBAACC,EAAA,EAAD,CAAKF,UAAU,WACX,kBAAC,IAAD,CAAMA,UAAU,WAAWL,GAAG,SAA9B,QACA,kBAAC,IAAD,CAAMK,UAAU,WAAWL,GAAG,SAA9B,yB,cCKLQ,MAhBf,WACI,OACI,oCACI,0BAAMH,UAAU,qBACZ,kBAACI,EAAA,EAAD,KACI,wDACA,4DAGR,4BAAQJ,UAAU,kBACd,6CAAkB,IAAIK,MAAOC,cAA7B,4BCADC,MAXf,WACI,OACI,8BACI,kBAACH,EAAA,EAAD,KACI,oCACA,wBAAIJ,UAAU,gBCMfQ,MAXf,WACI,OACI,8BACI,kBAACJ,EAAA,EAAD,KACI,iDACA,wBAAIJ,UAAU,gB,cCafS,MAbf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,QAAQC,UAAWL,IACrC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,QAAQC,UAAWJ,OCHzBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6f60a5aa.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\">\n            <Link to=\"/\">\n                <Navbar.Brand>Frontend Task</Navbar.Brand>\n            </Link>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse className=\"justify-content-end\" id=\"responsive-navbar-nav\">\n                <Nav className=\"mr-sm-2\">\n                    <Link className=\"nav-link\" to=\"/cats\">Cats</Link>\n                    <Link className=\"nav-link\" to=\"/lotr\">Lord Of The Rings</Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport './home.scss';\n\nfunction Home() {\n    return (\n        <>\n            <main className=\"landing-container\">\n                <Container>\n                    <h1>Welcome to Frontend Task</h1>\n                    <p>Built by Elijah Enuem-Udogu</p>\n                </Container>\n            </main>\n            <footer className=\"landing-footer\">\n                <small>Copyright {new Date().getFullYear()}, All Rights Reserved</small>\n            </footer>\n        </>\n    );\n}\n\nexport default Home;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nfunction Cats() {\n    return (\n        <main>\n            <Container>\n                <h1>Cats</h1>\n                <hr className=\"bg-light\" />\n            </Container>\n        </main>\n    );\n}\n\nexport default Cats;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nfunction Lotr() {\n    return (\n        <main>\n            <Container>\n                <h1>Lord Of The Rings</h1>\n                <hr className=\"bg-light\" />\n            </Container>\n        </main>\n    );\n}\n\nexport default Lotr;","import React from 'react';\nimport Header from './components/Header';\nimport Home from './pages/Home';\nimport Cats from './pages/Cats';\nimport Lotr from './pages/Lotr';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Header/>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/cats\" component={Cats} />\n        <Route exact path=\"/lotr\" component={Lotr} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}