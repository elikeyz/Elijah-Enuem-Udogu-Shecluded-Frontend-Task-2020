{"version":3,"sources":["store/sagas/lotrSaga.js","store/constants/index.js","store/sagas/index.js","store/reducers/lotrReducer.js","store/reducers/index.js","store/index.js","components/Header/index.js","pages/Home/index.js","pages/Cats/index.js","store/actions/lotrAction.js","components/LotrCard/index.js","pages/Lotr/index.js","App.js","serviceWorker.js","index.js"],"names":["lotrSaga","lotrWatcher","call","axios","get","process","REACT_APP_LOTR_BASE_URL","headers","Authorization","REACT_APP_LOTR_API_KEY","docs","data","put","type","error","takeLatest","dotenv","config","rootSaga","all","initialState","characters","isLoading","lotrReducer","state","action","combineReducers","lotr","sagaMiddleware","createSagaMiddleware","composeArgs","applyMiddleware","store","createStore","rootReducer","compose","run","Header","Navbar","bg","variant","expand","to","Brand","Toggle","aria-controls","Collapse","className","id","Nav","Home","Container","Date","getFullYear","Cats","getLotr","LotrCard","character","Card","Body","Title","name","Subtitle","race","gender","Text","realm","birth","spouse","death","Button","href","wikiUrl","text","target","rel","Lotr","props","lowestPageItem","highestPageItem","goToPreviousPage","bind","goToNextPage","this","setState","length","Pagination","Prev","disabled","onClick","Next","Row","slice","map","Col","md","sm","xs","key","_id","Component","connect","dispatch","bindActionCreators","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ca1dd2f8.chunk.js","sourcesContent":["import { put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport dotenv from 'dotenv';\nimport { GET_LOTR_STARTED, GET_LOTR_SUCCESS, GET_LOTR_FAILED } from '../constants';\n\ndotenv.config();\n\nfunction* lotrSaga() {\n    try {\n        const { data: { docs } } = yield call(axios.get, `${process.env.REACT_APP_LOTR_BASE_URL}/v1/character`, {\n            headers: {\n                Authorization: `Bearer ${process.env.REACT_APP_LOTR_API_KEY}`\n            }\n        });\n        yield put({\n            type: GET_LOTR_SUCCESS,\n            data: docs\n        });\n    } catch(error) {\n        yield put({\n            type: GET_LOTR_FAILED,\n            error\n        })\n    }\n}\n\nexport function* lotrWatcher() {\n    yield takeLatest(GET_LOTR_STARTED, lotrSaga);\n}","export const GET_LOTR_STARTED = 'GET_LOTR_STARTED';\nexport const GET_LOTR_SUCCESS = 'GET_LOTR_SUCCESS';\nexport const GET_LOTR_FAILED = 'GET_LOTR_FAILED';","import { all } from 'redux-saga/effects';\nimport { lotrWatcher } from './lotrSaga';\n\nexport default function* rootSaga() {\n    yield all([\n        lotrWatcher()\n    ]);\n}","import { GET_LOTR_STARTED, GET_LOTR_SUCCESS, GET_LOTR_FAILED } from '../constants';\n\nconst initialState = {\n    error: '',\n    characters: [],\n    isLoading: false\n}\n\nconst lotrReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case GET_LOTR_STARTED:\n            return { ...state, isLoading: true, error: '' };\n        case GET_LOTR_SUCCESS:\n            return { ...state, isLoading: false, characters: action.data };\n        case GET_LOTR_FAILED:\n            return { ...state, isLoading: false, error: action.error };\n        default:\n            return state;\n    }\n};\n\nexport default lotrReducer;","import { combineReducers } from 'redux';\nimport lotrReducer from './lotrReducer';\n\nexport default combineReducers({\n    lotr: lotrReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\nimport rootReducer from './reducers';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst composeArgs = [applyMiddleware(sagaMiddleware)];\n\nif ((process.env.NODE_ENV === 'development') && (window.__REDUX_DEVTOOLS_EXTENSION__)) {\n    composeArgs.push(window.__REDUX_DEVTOOLS_EXTENSION__());\n}\n\nconst store = createStore(\n    rootReducer,\n    compose(...composeArgs)\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\">\n            <Link to=\"/\">\n                <Navbar.Brand>Frontend Task</Navbar.Brand>\n            </Link>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse className=\"justify-content-end\" id=\"responsive-navbar-nav\">\n                <Nav className=\"mr-sm-2\">\n                    <Link className=\"nav-link\" to=\"/cats\">Cats</Link>\n                    <Link className=\"nav-link\" to=\"/lotr\">Lord Of The Rings</Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport './home.scss';\n\nfunction Home() {\n    return (\n        <>\n            <main className=\"landing-container\">\n                <Container>\n                    <h1>Welcome to Frontend Task</h1>\n                    <p>Built by Elijah Enuem-Udogu</p>\n                </Container>\n            </main>\n            <footer className=\"landing-footer\">\n                <small>Copyright {new Date().getFullYear()}, All Rights Reserved</small>\n            </footer>\n        </>\n    );\n}\n\nexport default Home;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nfunction Cats() {\n    return (\n        <main>\n            <Container>\n                <h1>Cats</h1>\n                <hr className=\"bg-light\" />\n            </Container>\n        </main>\n    );\n}\n\nexport default Cats;","import { GET_LOTR_STARTED } from '../constants';\n\nexport const getLotr = () => ({\n    type: GET_LOTR_STARTED\n});","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nfunction LotrCard({ character }) {\n    return (\n        <Card bg=\"secondary\">\n            <Card.Body>\n                <Card.Title>{character.name}</Card.Title>\n                <Card.Subtitle className=\"mb-2\">{character.race} - {character.gender}</Card.Subtitle>\n                <Card.Text>From the realm of {character.realm}</Card.Text>\n                <Card.Text>Born in {character.birth}</Card.Text>\n                <Card.Text>Married to {character.spouse}</Card.Text>\n                <Card.Text>Died in {character.death}</Card.Text>\n                <Button href={character.wikiUrl} variant=\"light\" text=\"dark\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn-block\">Learn More</Button>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default LotrCard;","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Pagination from 'react-bootstrap/Pagination';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { getLotr } from '../../store/actions';\nimport LotrCard from '../../components/LotrCard';\n\nclass Lotr extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            lowestPageItem: 1,\n            highestPageItem: 24\n        };\n\n        this.goToPreviousPage = this.goToPreviousPage.bind(this);\n        this.goToNextPage = this.goToNextPage.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.getLotr();\n    }\n\n    goToPreviousPage() {\n        if (this.state.lowestPageItem - 24 < 1) {\n            this.setState({\n                lowestPageItem: 1,\n                highestPageItem: 24\n            });\n        } else {\n            this.setState({\n                lowestPageItem: this.state.lowestPageItem - 24,\n                highestPageItem: this.state.highestPageItem - 24\n            });\n        }\n    }\n\n    goToNextPage() {\n        if (this.state.highestPageItem + 24 > this.props.characters.length) {\n            this.setState({\n                lowestPageItem: this.props.characters.length - ((this.props.characters.length % 24) - 1),\n                highestPageItem: this.props.characters.length\n            });\n        } else {\n            this.setState({\n                lowestPageItem: this.state.lowestPageItem + 24,\n                highestPageItem: this.state.highestPageItem + 24\n            });\n        }\n    }\n\n    render() {\n        return (\n            <main>\n                <Container>\n                    <h1>Lord Of The Rings</h1>\n                    <hr className=\"bg-light\" />\n                    <Pagination>\n                        {this.state.lowestPageItem <= 1 && (<Pagination.Prev className=\"mr-2\" disabled />)}\n                        {this.state.lowestPageItem > 1 && (<Pagination.Prev onClick={this.goToPreviousPage} className=\"mr-2\" />)}\n                        {this.state.highestPageItem < this.props.characters.length && (<Pagination.Next onClick={this.goToNextPage} className=\"ml-2\" />)}\n                        {this.state.highestPageItem >= this.props.characters.length && (<Pagination.Next className=\"ml-2\" disabled />)}\n                    </Pagination>\n                    <p>Showing {this.state.lowestPageItem} - {this.state.highestPageItem} of {this.props.characters.length} results</p>\n                    <Row>\n                        {this.props.characters.slice(this.state.lowestPageItem - 1, this.state.highestPageItem).map(character => (\n                            <Col md={4} sm={6} xs={12} className=\"mb-3\">\n                                <LotrCard key={character._id} character={character} />\n                            </Col>\n                        ))}\n                    </Row>\n                </Container>\n            </main>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    characters: state.lotr.characters,\n    error: state.lotr.error,\n    isLoading: state.lotr.isLoading\n});\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        getLotr\n    }, dispatch)\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lotr);","import React from 'react';\nimport Header from './components/Header';\nimport Home from './pages/Home';\nimport Cats from './pages/Cats';\nimport Lotr from './pages/Lotr';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Header/>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/cats\" component={Cats} />\n        <Route exact path=\"/lotr\" component={Lotr} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}